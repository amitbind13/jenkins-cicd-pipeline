pipeline {
    agent any
    triggers {
        githubPush()
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarQubeScanner'
                    withSonarQubeEnv('SonarQube') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }
        stage('Code Coverage') {
            steps {
                sh 'mvn clean test jacoco:report'
                jacoco()
            }
        }
        stage('Cyclomatic Complexity') {
            steps {
                sh 'lizard --cyclomatic src/'
            }
        }
        stage('Security Vulnerability Scan') {
            steps {
                sh 'mvn dependency-check:check'
            }
        }
    }
    post {
        success {
            slackSend(channel: '#build-notifications', message: "Build successful!")
        }
        failure {
            slackSend(channel: '#build-notifications', message: "Build failed!")
        }
    }
}
